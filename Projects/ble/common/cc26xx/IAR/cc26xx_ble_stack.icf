/*******************************************************************************
  Filename:       cc26xx_ble_stack.icf
  Revised:        $Date: 2014-03-24 07:09:35 -0700 (Mon, 24 Mar 2014) $
  Revision:       $Revision: 37847 $

  Description:    IAR ARM Linker Configuration File - BLE Stack

  Note: Code stack and heap are allocated by the Application/RTOS build.

  Imported Symbols
  Note: Linker defines are located in the IAR IDE project using --config_def
        in Options->Linker->Extra Options, or placed in Options->Linker->
        Config->Configuration file symbol definitions.

  CCxxxx:            Device Name (e.g. CC2650).
  FLASH_ONLY_BUILD:  Build full BLE stack in flash only memory.
  FLASH_ROM_BUILD:   Build Flash portion of BLE stack to work with ROM code.
  ROM_BUILD:         Build ROM portion of BLE stack.
  COMMON_ROM_BUILD:  Build of common ROM code.
  TEST_ROM_IN_FLASH: Build ROM code in Flash memory to test.
  ICALL_STACK0_ADDR: Start address of flash only and flash ROM builds.
  ICALL_RAM0_ADDR:   Start address of RAM.

  Exported Symbols
  Note: Can be used as externs in C code.

  ROM_BASE_ADDR:        Location of start of ROM (where RT Init is expected).
  RAM_BASE_ADDR:        Location of start of RAM (for ICall and JT pointers).
  COMMON_RAM_BASE_ADDR: Location of start of RAM (for ICall and JT pointers).
  PAGE_SIZE:            Size of Flash sector, in bytes.
  NUM_SNV_PAGES:        Number of sectors used for Simple NV.

  Copyright 2013-2014 Texas Instruments Incorporated. All rights reserved.

  IMPORTANT: Your use of this Software is limited to those specific rights
  granted under the terms of a software license agreement between the user
  who downloaded the software, his/her employer (which must be your employer)
  and Texas Instruments Incorporated (the "License").  You may not use this
  Software unless you agree to abide by the terms of the License. The License
  limits your use, and you acknowledge, that the Software may not be modified,
  copied or distributed unless embedded on a Texas Instruments microcontroller
  or used solely and exclusively in conjunction with a Texas Instruments radio
  frequency transceiver, which is integrated into your product.  Other than for
  the foregoing purpose, you may not use, reproduce, copy, prepare derivative
  works of, modify, distribute, perform, display or sell this Software and/or
  its documentation for any purpose.

  YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
  PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
  INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
  NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
  TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
  NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
  LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
  INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
  OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
  OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
  (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.

  Should you have any questions regarding your right to use this Software,
  contact Texas Instruments Incorporated at www.TI.com.
*******************************************************************************/

////////////////////////////////////////////////////////////////////////////////
// Memory Sizes
////////////////////////////////////////////////////////////////////////////////

// isdefinedsymbol(CC2650) <- Do not delete used by the Boundary tool file parser
// isdefinedsymbol(CC2640) <- Do not delete used by the Boundary tool file parser
define symbol RAM_SIZE              = 0x00005000;  // 20K
define symbol FLASH_SIZE            = 0x00020000;  // 128K

////////////////////////////////////////////////////////////////////////////////
// Memory Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// RAM
//
if ( isdefinedsymbol(FLASH_ONLY_BUILD) )
{
  if ( isdefinedsymbol(ICALL_RAM0_ADDR) )
  {
    define symbol RAM_START         = ICALL_RAM0_ADDR;
  }
  else // default
  {
    define symbol RAM_START         = 0x20002D00;
  }

  if ( isdefinedsymbol(CC2650) )
  {
    define symbol RAM_END           = 0x20004FFF;
  }
  else // default
  {
    define symbol RAM_END           = 0x20003FFF;
  }
}
else if ( isdefinedsymbol(ROM_BUILD) )
{
  if ( isdefinedsymbol(CC2650) )
  {
    define symbol RAM_START         = 0x200048E8;
    define symbol RAM_END           = 0x20004F2B;
  }
  else
  {
    define symbol RAM_START         = 0x20003300;
    define symbol RAM_END           = 0x20003FFF;
  }

  define symbol RAM_BASE_ADDR       = RAM_START;
  export symbol RAM_BASE_ADDR;
}
else if ( isdefinedsymbol(FLASH_ROM_BUILD) )
{
  if ( isdefinedsymbol(CC2650) )
  {
    if ( isdefinedsymbol(ICALL_RAM0_ADDR) )
    {
      define symbol RAM_START       = ICALL_RAM0_ADDR;
    }
    else
    {
      define symbol RAM_START       = 0x20002800;
    }
    define symbol RAM_END           = 0x200048E7;
  }
  else
  {
    if ( isdefinedsymbol(ICALL_RAM0_ADDR) )
    {
      define symbol RAM_START       = ICALL_RAM0_ADDR;
    }
    else
    {
      define symbol RAM_START       = 0x20002D00;
    }
    define symbol RAM_END           = 0x200031FF;
  }
}
else // unknown build
{
  define symbol RAM_START           = 0xFFFFFFFF;
  define symbol RAM_END             = 0xFFFFFFFF;
}

////////////////////////////////////////////////////////////////////////////////
// Flash
//
define symbol PAGE_SIZE             = 0x1000;
export symbol PAGE_SIZE;

define symbol NUM_RESERVED_PAGES    = 1;
define symbol RESERVED_SIZE         = (NUM_RESERVED_PAGES * PAGE_SIZE);

if ( isdefinedsymbol(FLASH_ONLY_BUILD) )
{
  if ( isdefinedsymbol(ICALL_STACK0_ADDR) )
  {
    define symbol FLASH_START       = ICALL_STACK0_ADDR;
  }
  else // default
  {
    define symbol FLASH_START       = 0x00008000;
  }

  define symbol FLASH_END           = FLASH_SIZE - RESERVED_SIZE - 1;
}
else if ( isdefinedsymbol(FLASH_ROM_BUILD) )
{
  if ( isdefinedsymbol(ICALL_STACK0_ADDR) )
  {
    define symbol FLASH_START       = ICALL_STACK0_ADDR;
  }
  else // default
  {
    define symbol FLASH_START       = 0x00008000;
  }

  if ( isdefinedsymbol(TEST_ROM_IN_FLASH) )
  {
    define symbol FLASH_END         = (ROM_START-1);
  }
  else // ROM code is in ROM memory
  {
    define symbol FLASH_END         = FLASH_SIZE - RESERVED_SIZE - 1;
  }
}
else // unknown build
{
  define symbol FLASH_START         = 0xFFFFFFFF;
  define symbol FLASH_END           = 0xFFFFFFFF;
}

//Entry section is set to the sector before SNV.
define symbol ENTRY_SECTION_START     = ((FLASH_END + 1) - PAGE_SIZE * 2);
define symbol ENTRY_SECTION_END       = (FLASH_END - PAGE_SIZE);
////////////////////////////////////////////////////////////////////////////////
// Memory Regions
////////////////////////////////////////////////////////////////////////////////

define memory mem with size = 4G;

define region FLASH = mem:[from FLASH_START to FLASH_END];
define region RAM   = mem:[from RAM_START   to RAM_END];
define region ENTRY_SECTION = mem:[from ENTRY_SECTION_START   to ENTRY_SECTION_END];

////////////////////////////////////////////////////////////////////////////////
// Memory Placement
////////////////////////////////////////////////////////////////////////////////

// Flash Software Entry Point
////////////////////////////////////////////////////////////////////////////////

if ( isdefinedsymbol(FLASH_ONLY_BUILD) || isdefinedsymbol(FLASH_ROM_BUILD) )
{
  place at start of FLASH { readonly section EntrySection };
//  place at start of ENTRY_SECTION { readonly section EntrySection };
}

place at end of FLASH { ro section .snvSectors };
place in FLASH { readonly };
place in RAM { readwrite };


////////////////////////////////////////////////////////////////////////////////
// Initialization
////////////////////////////////////////////////////////////////////////////////

  initialize by copy with packing = packbits { readwrite };

do not initialize
{
  section .noinit,
  section .stack,
};

////////////////////////////////////////////////////////////////////////////////
