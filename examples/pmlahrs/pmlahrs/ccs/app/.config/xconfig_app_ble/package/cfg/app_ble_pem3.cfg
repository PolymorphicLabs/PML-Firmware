/*
 *  ======== package/cfg/app_ble_pem3.cfg ========
 *  This generated configuration script runs the user's configuration script
 *  the context of a specific target and platform in order to generate
 *  all the files necessary to create an executable; e.g., linker command
 *  files, static C/C++ data structures, etc.
 */

/*
 *  ======== _applyChanges ========
 *  Changes that bring the build target to the state at the end of the build
 *  model
 */
function _applyChanges(obj, chgObj) {
    var wasSealed = false;
    if (obj.$sealed) {
        wasSealed = true;
        obj.$unseal();
    }
    for (var prop in chgObj) {
        if (typeof obj[prop] == 'object' && obj[prop] != undefined) {
            if ("$category" in obj[prop] && obj[prop].$category == "Vector") {
               obj[prop].length = chgObj[prop].length;
               for (var i = 0; i < chgObj[prop].length; i++) {
                   if (obj[prop].length < i + 1) {
                       obj[prop].length++;
                   }
                   obj[prop][i] = chgObj[prop][i];
               }
            }
            else {
        	_applyChanges(obj[prop], chgObj[prop]);
            }
	}
	else {
            obj[prop] = chgObj[prop];
	}
    }
    if (wasSealed) {
        obj.$seal();
    }
}

/*
 *  ======== _runescape ========
 *  Recursive unescape to decode serialized strings
 */
function _runescape(obj) {
    for (var i in obj) {
	if (obj[i] != null) {
	    if (typeof obj[i] == 'string') {
		obj[i] = unescape(obj[i]);
	    }
	    else if (typeof obj[i] == 'object') {
		_runescape(obj[i]);
	    }
	}
    }
}

/*
 *  ======== _getPlatCfg ========
 */
function _getPlatCfg() {
    var tmp = {};
    _runescape(tmp);
    return (tmp);
}
/*
 *  ======== _cfginit ========
 */
function _cfginit() {
    xdc.loadPackage('xdc.services.intern.cmd');
    var prog = xdc.om['xdc.cfg.Program'];

    /* initialize prog attrs from build model */
    var build = {
        profile: "release",
        cfgScript: "C%3A/ti/simplelink/PML-Firmware/examples/pmlahrs/pmlahrs/ccs/config/app_ble.cfg",
        cfgHome: "xconfig_app_ble",
        cfgArgs: "null",
        cfgArgsEncoded: true,
        releases: {
            0: {
                name: "xconfig_app_ble",
                attrs: {
                    prefix: "",
                    label: "default"
                },
                otherFiles: {},
                excludeDirs: {}
            }
        },
        prelink: false
    };
    _runescape(build);
    build.cfgArgs = null;
    build.target = xdc.module("ti.targets.arm.elf.M3");
    var targChange = {
        platforms: [
            "ti.platforms.simCM3"
        ],
        version: "ti.targets.arm.elf.M3%7B1%2C0%2C15.12%2C1",
        extensions: {
            ".sem3e": {
                suf: ".sem3e",
                typ: "asm"
            },
            ".sem3": {
                suf: ".sem3",
                typ: "asm"
            },
            ".sv7M": {
                suf: ".sv7M",
                typ: "asm"
            }
        },
        rootDir: "C%3A/ti/ccsv6/tools/compiler/ti-cgt-arm_15.12.1.LTS",
        ccOpts: {
            prefix: "-mv7M3%20--code_state%3D16%20-me%20--include_path%3D%22C%3A/ti/ccsv6/tools/compiler/ti-cgt-arm_15.12.1.LTS/include%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/examples/sensortag/cc26xx/app%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/controller/cc26xx/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/common/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/icall/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/batt/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/dev_info%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/hid_dev/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/keys%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/oad/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/roles%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/roles/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/profiles/sensor_profile/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/heapmgr%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/hal/src/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/hal/src/target/_common/cc26xx%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/hal/src/target/_common%22%20--include_path%3D%22C%3A/ti/simplelink/PML-Firmware/src/target%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/icall/src%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/icall/src/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/osal/src/inc%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/services/src/saddr%22%20--include_path%3D%22C%3A/ti/simplelink/ble_sdk_2_02_00_31/src/components/services/src/sdata%22%20--include_path%3D%22C%3A/ti/tirtos_cc13xx_cc26xx_2_20_00_06/products/cc26xxware_2_24_02_17202%22%20--include_path%3D%22C%3A/ti/tirtos_cc13xx_cc26xx_2_18_00_03/products/tidrivers_cc13xx_cc26xx_2_16_01_13/packages/ti/mw/extflash%22%20--include_path%3D%22C%3A/ti/tirtos_cc13xx_cc26xx_2_18_00_03/products/tidrivers_cc13xx_cc26xx_2_16_01_13/packages/ti/mw/sensors%22%20--include_path%3D%22C%3A/ti/tirtos_cc13xx_cc26xx_2_18_00_03/products/tidrivers_cc13xx_cc26xx_2_16_01_13/packages/ti/mw/sensortag%22%20--c99%20--define%3DPOWER_SAVING%20--define%3DEXCLUDE_OAD%20--define%3DEXCLUDE_AUDIO%20--define%3DEXCLUDE_FACTORY_RESET%20--define%3DGATT_TI_UUID_128_BIT%20--define%3DUSE_ICALL%20--define%3DGAPROLE_TASK_STACK_SIZE%3D640%20--define%3DHEAPMGR_SIZE%3D0%20--define%3DICALL_MAX_NUM_TASKS%3D8%20--define%3DICALL_MAX_NUM_ENTITIES%3D11%20--define%3Dxdc_runtime_Assert_DISABLE_ALL%20--define%3Dxdc_runtime_Log_DISABLE_ALL%20--define%3DPMLAHRS%20--define%3DCC26XX%20--define%3DDisplay_DISABLE_ALL%20--diag_wrap%3Doff%20--diag_warning%3D225%20--display_error_number%20--diag_suppress%3D48%20--gen_func_subsections%3Don%20--abi%3Deabi%20%20-qq%20-pdsw225"
        },
        rawVersion: "15.12.1"
    };
    _runescape(targChange);
    _applyChanges(build.target, targChange);

    prog.build = build;

    prog.name = "app_ble.xem3";
    prog.cfgBase = "package/cfg/app_ble_pem3";

    prog.endian = prog.build.target.model.endian;
    prog.codeModel = prog.build.target.model.codeModel;

    /* use the platform package's Platform module */
    var Platform = xdc.useModule("ti.platforms.simplelink.Platform");
    var platParams = _getPlatCfg();
    var invalidParams = [];
    for (var prop in platParams) {
        if (!(prop in Platform.PARAMS)) {
            delete platParams[prop];
            invalidParams.push(prop);
        }
    }
    prog.platformName = "ti.platforms.simplelink:CC2650F128";
    prog.platform = Platform.create("CC2650F128", platParams);
    for (var i = 0; i < invalidParams.length; i++) {
        Platform.$logWarning("The parameter '" + invalidParams[i] + "' is " +
            "passed to this platform instance through Build.platformTable, " +
            "but the instance does not have a configuration parameter with " +
            "that name.", prog.platform, "CC2650F128");
    }

    /* record the executable's package name */
    prog.buildPackage = "xconfig_app_ble";

    /* record build-model information required during config generation */
    prog.$$bind("$$isasm", 0);
    prog.$$bind("$$isrom", 0);
    prog.$$bind("$$gentab", [
    ]);

    /* bind prog to an appropriate execution context */
    prog.cpu = prog.platform.getExeContext(prog);

    /* import the target's run-time support pkg */
    xdc.loadPackage("ti.targets.arm.rtsarm");
}

/* function to import the cfg script's package */
function _userscript(script) {
    var home;
    var spath;
    home = xdc.loadPackage("xconfig_app_ble");

    xdc.om.$$bind('$homepkg', home);

    var cfgScript = "C:/ti/simplelink/PML-Firmware/examples/pmlahrs/pmlahrs/ccs/config/app_ble.cfg";
    if (!script) {
        utils.loadCapsule(cfgScript, false, spath);
    }
    else {
        /* set up the same environment that loadCapsule would */
        var $saveCsd = utils.csd;
        var $cfgFile = utils.findFile(cfgScript, spath);
        var cname = cfgScript;
        if ($cfgFile) {
            $cfgFile = java.io.File($cfgFile);
            utils.csd = $cfgFile.getParentFile().getCanonicalPath();
            cname = "" + $cfgFile.getCanonicalPath();
        }

        /* create the capsule object */
        var cap = {
            prototype:  utils.global,
            $path:      cname,
            $private:   {path: cname},
            $capsule:   undefined,      /* set to cap below */
        };

        /* 'this.$capsule' is always cap object */
        cap.$capsule = cap;

        /* save the capsule object */
        utils.$$capmap[cname] = cap;

        try {
            var cx =
                Packages.org.mozilla.javascript.Context.getCurrentContext();
            var rdr = new
                java.io.BufferedReader(new java.io.StringReader(script));
            Packages.config.Shell.evaluateLoad(cx, cap, rdr, cname, 1);
        }
        finally {
            rdr.close();
            utils.csd = $saveCsd;
        }
    }
}

function _postinit() {
    var cout = null;

    var Program = xdc.om['xdc.cfg.Program'];
    /* get the exec command for this executable */
    if (Program.execCmd == null) {
        Program.execCmd = Program.platform.getExecCmd(Program,
            xdc.om["ti.platforms.simplelink"].packageBase);
    }
    cout = "define EXEC." + Program.name + '\n\n';
    cout += Program.execCmd;
    cout += "\nendef\n\n";

    /* if SourceDir generates a makefile, we need to run it */
    _genSourceDirMak("package/cfg/app_ble_pem3", "app_ble.pem3");

    utils.genDep("package/cfg/app_ble_pem3", "xconfig_app_ble", utils.loadedFiles, cout, null);
}

function _genSourceDirMak(cfgBase, cfgName)
{
    var SourceDir = xdc.om['xdc.cfg.SourceDir'];

    if (SourceDir && SourceDir.$instances.length > 0) {
        /* construct rule to run SourceDir generated makefile */
        var make = "\t$(MAKE) -f "
            + SourceDir.outputDir + "/" + SourceDir.makefileName;

        /* this file is included by package.mak (if it exists) */
        var file = new java.io.File(cfgBase + ".cfg.mak");
        file["delete"]();
        var out = new java.io.BufferedWriter(new java.io.FileWriter(file));

        /* add rules to run SourceDir generated makefile */
        out.write("# invoke SourceDir generated makefile for " + cfgName
            + "\n" + cfgName + ": .libraries," + cfgName
            + "\n.libraries," + cfgName + ": " + cfgBase + ".xdl\n"
            + make + "\n\n"
            + "clean::\n" + make + " clean\n\n"
        );
        out.close();
        out = null;
    }
}
